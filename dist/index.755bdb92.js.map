{"mappings":"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","sources":["src/dom.js"],"sourcesContent":["window.dom = {\n  //增\n  create(string) {\n    // return document.createElement(tagName);\n    //用于创建节点\n    const container = document.createElement(\"template\");\n    container.innerHTML = string.trim(); //trim函数去掉string字符串两边的空格，此处防止访问到的第一个孩子变成文本\n    console.log(container);\n    return container.content.firstChild; //template元素返回div的第一个儿子的方式\n  },\n  after(node, node2) {\n    //找到node节点的爸爸，然后调用爸爸的insertBefore的方法，然后把node2插到node的下一个节点的前面\n\n    node.parentNode.insertBefore(node2, node.nextSibling); //用于新增弟弟\n    //如果node节点是最后一个节点，没有下一个sibling，也依然能插入成功\n  },\n  before(node, node2) {\n    node.parentNode.insertBefore(node2, node); //用于新增哥哥，把node2放到node前面\n  },\n  append(parent, node) {\n    parent.appendChild(node); //用于新增儿子，在parent下加\n  },\n  wrap(node, parent) {\n    //用于新增爸爸，parent包住node\n    dom.before(node, parent); //把新节点放到node前面\n    dom.append(parent, node); //把node放到parent里面\n  },\n  //删\n  remove(node) {\n    //用于删除节点\n    node.parentNode.removeChild(node); //让爸爸删除儿子，把元素从树中删除\n    return node; ////返回移除的对象，return可以让外面保留这个节点的引用\n  },\n  empty(node) {\n    //用于删除后代\n    //const childNodes = node.childNodes;\n    const { childNodes } = node;\n    const array = [];\n    let x = node.firstChild;\n    while (x) {\n      array.push(dom.remove(node.firstChild));\n      x = node.firstChild;\n    }\n    return array;\n  },\n  //改\n  //用于读写属性\n  attr(node, name, value) {\n    //重载：根据参数个数写不同的代码\n    //用于读属性\n    if (arguments.length === 3) {\n      node.setAttribute(name, value); //set\n    } else if (arguments.length === 2) {\n      return node.getAttribute(name); //读取\n    }\n  },\n  //用于读写文本内容\n  text(node, string) {\n    if (arguments.length === 2) {\n      //适配：判断是否有innerText，若有就使用innerText（ie），若没有就使用textContent（firefox/chrome）\n      //用于写文本内容\n      if (\"innerText\" in node) {\n        node.innerText = string; // ie\n      } else {\n        node.textContent = string; // firefox / chrome}\n      }\n    } else if (arguments.length === 1) {\n      //用于读文本内容\n      if (\"innerText\" in node) {\n        return node.innerText;\n      } else {\n        return node.textContent;\n      }\n    }\n  },\n  //用于读写HTML内容\n  html(node, string) {\n    //重载：根据参数的长度实现不同的效果\n    if (arguments.length === 2) {\n      node.innerHTML = string; //写HTML内容\n    } else if (arguments.length === 1) {\n      return node.innerHTML; //读HTML内容\n    }\n  },\n  //用于修改style\n  style(node, name, value) {\n    if (arguments.length === 3) {\n      //dom.style(div, 'color', 'red' ) 设置style\n      node.style[name] = value;\n    } else if (arguments.length === 2) {\n      if (typeof name === \"string\") {\n        //dom.style(div,'color') 读取div的color\n        return node.style[name];\n      } else if (name instanceof Object) {\n        //dom.style(div,{color:'red'})\n        const object = name;\n        for (let key in name) {\n          //key:border / color\n          //node.style.border = ...\n          //node.style.color = ...\n          //key是变量要放到[]中若是node.style.key,key就变成了字符串\n          node.style[key] = object[key];\n        }\n      }\n    }\n  },\n  //对class操作\n  class: {\n    //class是个对象，对象里有个add\n    add(node, className) {\n      node.classList.add(className); //用于添加class\n    },\n    remove(node, className) {\n      node.classList.remove(className); //用于删除class\n    },\n    has(node, className) {\n      return node.classList.contains(className); //用于判断是否有class\n    },\n  },\n  //用于添加事件监听\n  on(node, eventName, fn) {\n    node.addEventListener(eventName, fn);\n  },\n  //用于删除事件监听\n  off(node, eventName, fn) {\n    node.removeEventListener(eventName, fn);\n  },\n  //查\n  //dom.find('选择器',范围)用于获取标签或标签们,\n  find(selector, scope) {\n    //如果有scope就在scope中调用querySelectorAll，如果没有scope就在document来querySelectorAll\n    return (scope || document).querySelectorAll(selector);\n  },\n  //用于获取父元素\n  parent(node) {\n    return node.parentNode;\n  },\n  children(node) {\n    return node.children;\n  },\n  //用于获取兄弟姐妹元素\n  siblings(node) {\n    //children是伪数组，要变成数组才能使用filter对元素进行过滤\n    return Array.from(node.parentNode.children).filter((n) => n !== node);\n  },\n  //用于获取弟弟\n  next(node) {\n    let x = node.nextSibling;\n    while (x && x.nodeType === 3) {\n      x = x.nextSibling;\n    }\n    return x;\n  },\n  //用于获取哥哥\n  previous(node) {\n    let x = node.previousSibling;\n    while (x.nodeType === 3) {\n      x = x.previousSibling;\n    }\n    return x;\n  },\n  //用于遍历所有节点\n  each(nodeList, fn) {\n    for (let i = 0; i < nodeList.length; i++) {\n      fn.call(null, nodeList[i]);\n    }\n  },\n  //用于获取排行老几\n  index(node) {\n    const list = dom.children(node.parentNode);\n    let i;\n    for (i = 0; i < list.length; i++) {\n      if (list[i] === node) {\n        break;\n      }\n    }\n    return i;\n  },\n};\n"],"names":[],"version":3,"file":"index.755bdb92.js.map","sourceRoot":"/__parcel_source_root/"}